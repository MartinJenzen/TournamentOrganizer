// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// A person using the system
model User {
  id                  Int           @id @default(autoincrement())
  email               String        @unique
  password            String
  username            String?       @unique
  tournamentsOwned    Tournament[]  @relation("OwnedTournaments")     // Tournaments this user owns
  tournamentInvites   Tournament[]  @relation("InvitedUsers")
  tournamentsManaged  Tournament[]  @relation("ManagedTournaments")   // Tournaments this user manages
  enlistedTournaments Tournament[]  @relation("EnlistedTournaments")  // Tournaments this user is participating in
  tournamentsWon      Tournament[]  @relation("WonTournaments")       // Tournaments this user has won
  teams               Team[]
}

  /// A tournament (league, group + playoffs, etc.)
model Tournament {
  id                Int               @id @default(autoincrement())
  name              String            @unique
  ownerId           Int
  owner             User              @relation("OwnedTournaments", fields: [ownerId], references: [id])
  coOwners          User[]            @relation("ManagedTournaments")
  enlistedUsers     User[]            @relation("EnlistedTournaments")
  status            TournamentStatus  @default(IN_PROGRESS)

  type              TournamentType
  matchesPerTeam    Int?              @default(2)   /// Number of matches against each team in league/group stage
  leagueTeams       Int?              @default(20)  /// Number of teams in league format

  hasGroupStage     Boolean           @default(false)
  groupStageTeams   Int?              @default(8)   /// Total number of teams in group stage
  numberOfGroups    Int?              @default(2)   /// Number of groups in group stage
  topTeamsAdvancing Int?              @default(2)   /// Number of teams advancing from group stage to knockout
  groups            Group[]

  hasKnockoutStage  Boolean           @default(false)
  knockoutRounds    Int?              @default(1)   /// Number of rounds in play-offs (quater-finals, semi-finals, etc.)
  knockoutLegs      Int?              @default(1)   /// Number of play-off legs (1 for single-elimination, 2 for double-elimination)

  invitedUsers      User[]            @relation("InvitedUsers")
  teams             Team[]            @relation("TournamentTeams")
  matches           Match[]           @relation("TournamentMatches")

  winnerUser        User?             @relation("WonTournaments", fields: [winnerUserId], references: [id])
  winnerUserId      Int?
  winnerTeam        String?

}

/// Type of tournament
/// - LEAGUE: Round-robin league format
/// - GROUP_STAGE: Group stage with top teams advancing
/// - KNOCKOUT: Elimination play-off format
/// - CUP: Cup competition (league or group stage with knockout rounds)
enum TournamentType {
  LEAGUE      @map("League")
  GROUP_STAGE @map("Group Stage")
  KNOCKOUT    @map("Knockout")
  CUP         @map("Cup")
}

enum TournamentStatus {
  IN_PROGRESS @map("In Progress")
  COMPLETED   @map("Completed")
}

/// A per-tournament football team
model Team {
  id             Int        @id @default(autoincrement())
  name           String
  tournament     Tournament @relation("TournamentTeams", fields: [tournamentId], references: [id])
  tournamentId   Int
  user           User?      @relation(fields: [userId], references: [id])
  userId         Int?

  gamesPlayed    Int        @default(0)
  wins           Int        @default(0)
  draws          Int        @default(0)
  losses         Int        @default(0)
  goalsFor       Int        @default(0)
  goalsAgainst   Int        @default(0)
  goalDifference Int        @default(0)
  points         Int        @default(0)

  group          Group?     @relation(fields: [groupId], references: [id])
  groupId        Int?
  position       Int?       // Position in group or league table

  players        Player[]
  homeMatches    Match[]    @relation("HomeMatches")
  awayMatches    Match[]    @relation("AwayMatches")
}

model Group {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(1)    // "A", "B", etc.

  tournament    Tournament  @relation(fields: [tournamentId], references: [id])
  tournamentId  Int

  teams         Team[]
}

/// Individual football player on a team
model Player {
  id          Int           @id @default(autoincrement())
  name        String
  team        Team          @relation(fields: [teamId], references: [id])
  teamId      Int
  goals       Int           @default(0)
  assists     Int           @default(0)
  matchEvents MatchEvent[]  // MatchEvents this player was involved in (goals/assists)
}

/// A match in a specific tournament
model Match {
  id             Int          @id @default(autoincrement())
  date           DateTime     @default(now())
  tournament     Tournament   @relation("TournamentMatches", fields: [tournamentId], references: [id])
  tournamentId   Int

  homeTeam       Team         @relation("HomeMatches", fields: [homeTeamId], references: [id])
  homeTeamId     Int
  awayTeam       Team         @relation("AwayMatches", fields: [awayTeamId], references: [id])
  awayTeamId     Int

  homeScore      Int
  awayScore      Int

  stageType      StageType    // League play, group stage or play-offs, etc.
  knockoutRound  KnockoutRound?

  events         MatchEvent[]
}

enum StageType {
  LEAGUE         @map("League")
  GROUP_STAGE    @map("Group Stage")
  KNOCKOUT       @map("Knockout")
}

enum KnockoutRound {
  ROUND_OF_16     @map("Round of 16")
  QUARTER_FINALS  @map("Quarter-finals")
  SEMI_FINALS     @map("Semi-finals")
  FINAL           @map("Final")
}

/// Details of who scored/assisted in a match
model MatchEvent {
  id        Int         @id @default(autoincrement())
  match     Match       @relation(fields: [matchId], references: [id])
  matchId   Int
  player    Player      @relation(fields: [playerId], references: [id])
  playerId  Int
  type      EventType
  amount    Int         @default(0)    // Number of goals/assists
}

enum EventType {
  GOAL      @map("Goal")
  ASSIST    @map("Assist")
}